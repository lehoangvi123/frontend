import React, { useState } from 'react';

const Home = () => {
  const [hoveredItem, setHoveredItem] = useState(null);

  const styles = {
    pageContainer: {
      minHeight: '100vh',
      width: '100%',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
      margin: 0,
      padding: 0
    },

    // Main content styles
    mainContent: {
      width: '100%',
      padding: '0',
      position: 'relative'
    },
    
    // Hero section
    heroSection: {
      width: '100%',
      textAlign: 'center',
      marginBottom: '80px',
      padding: '60px 40px',
      background: 'rgba(255,255,255,0.1)',
      backdropFilter: 'blur(15px)',
      border: '1px solid rgba(255,255,255,0.2)',
      position: 'relative',
      overflow: 'hidden'
    },
    heroTitle: {
      fontSize: 'clamp(3rem, 6vw, 5rem)',
      color: 'white',
      fontWeight: 'bold',
      marginBottom: '30px',
      textShadow: '0 4px 20px rgba(0,0,0,0.3)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      gap: '20px'
    },
    heroIcon: {
      fontSize: '4rem',
      animation: 'rotate 3s linear infinite'
    },
    heroSubtitle: {
      fontSize: '1.4rem',
      color: 'rgba(255,255,255,0.9)',
      lineHeight: 1.6,
      maxWidth: '800px',
      margin: '0 auto'
    },

    // Features grid
    featuresGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
      gap: '40px',
      marginBottom: '80px',
      padding: '0 40px'
    },
    featureCard: {
      background: 'rgba(255,255,255,0.95)',
      borderRadius: '20px',
      padding: '40px',
      boxShadow: '0 20px 40px rgba(0,0,0,0.1)',
      transition: 'all 0.4s ease',
      border: '1px solid rgba(255,255,255,0.3)',
      position: 'relative',
      overflow: 'hidden'
    },
    featureCardHover: {
      transform: 'translateY(-10px)',
      boxShadow: '0 30px 60px rgba(0,0,0,0.2)'
    },
    featureTitle: {
      fontSize: '2rem',
      color: '#2c3e50',
      marginBottom: '25px',
      display: 'flex',
      alignItems: 'center',
      gap: '15px'
    },
    featureIcon: {
      fontSize: '2.5rem'
    },
    featureList: {
      listStyle: 'none',
      padding: 0,
      margin: 0
    },
    featureItem: {
      background: 'linear-gradient(90deg, #f8f9fa, #e9ecef)',
      margin: '15px 0',
      padding: '18px 25px',
      borderRadius: '12px',
      borderLeft: '4px solid #4ecdc4',
      transition: 'all 0.3s ease',
      cursor: 'pointer',
      fontSize: '1rem',
      lineHeight: 1.5
    },

    // Steps section
    stepsSection: {
      width: '100%',
      background: 'rgba(255,255,255,0.95)',
      padding: '50px 40px',
      marginBottom: '60px',
      boxShadow: '0 25px 50px rgba(0,0,0,0.1)'
    },
    stepsTitle: {
      fontSize: '2.5rem',
      color: '#2c3e50',
      textAlign: 'center',
      marginBottom: '50px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      gap: '15px'
    },
    stepsGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
      gap: '30px'
    },
    stepCard: {
      background: 'linear-gradient(135deg, #667eea, #764ba2)',
      color: 'white',
      padding: '35px',
      borderRadius: '20px',
      position: 'relative',
      transition: 'all 0.3s ease',
      cursor: 'pointer',
      textAlign: 'center'
    },
    stepNumber: {
      position: 'absolute',
      top: '-15px',
      left: '50%',
      transform: 'translateX(-50%)',
      width: '50px',
      height: '50px',
      background: 'linear-gradient(45deg, #ff6b6b, #4ecdc4)',
      borderRadius: '50%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: '1.5rem',
      fontWeight: 'bold',
      boxShadow: '0 10px 25px rgba(0,0,0,0.2)'
    },
    stepTitle: {
      fontSize: '1.3rem',
      fontWeight: 'bold',
      marginBottom: '15px',
      marginTop: '20px'
    },
    stepDesc: {
      fontSize: '1rem',
      opacity: 0.9,
      lineHeight: 1.5
    },

    // CTA section
    ctaSection: {
      width: '100%',
      background: 'linear-gradient(135deg, #ff6b6b, #4ecdc4)',
      padding: '60px 40px',
      textAlign: 'center',
      color: 'white',
      position: 'relative',
      overflow: 'hidden'
    },
    ctaTitle: {
      fontSize: '2.8rem',
      marginBottom: '20px',
      fontWeight: 'bold'
    },
    ctaSubtitle: {
      fontSize: '1.2rem',
      marginBottom: '40px',
      opacity: 0.9
    },
    ctaButton: {
      background: 'white',
      color: '#2c3e50',
      border: 'none',
      padding: '20px 50px',
      fontSize: '1.2rem',
      fontWeight: 'bold',
      borderRadius: '50px',
      cursor: 'pointer',
      transition: 'all 0.3s ease',
      boxShadow: '0 15px 35px rgba(0,0,0,0.2)',
      textDecoration: 'none',
      display: 'inline-block'
    },

    // Background elements
    backgroundShape: {
      position: 'absolute',
      borderRadius: '50%',
      background: 'linear-gradient(45deg, rgba(255,107,107,0.1), rgba(78,205,196,0.1))',
      animation: 'float 8s ease-in-out infinite'
    },
    shape1: {
      width: '200px',
      height: '200px',
      top: '10%',
      left: '5%',
      animationDelay: '0s'
    },
    shape2: {
      width: '150px',
      height: '150px',
      top: '70%',
      right: '10%',
      animationDelay: '3s'
    },
    shape3: {
      width: '100px',
      height: '100px',
      top: '40%',
      left: '80%',
      animationDelay: '6s'
    }
  };

  const keyframes = `
    @keyframes float {
      0%, 100% { 
        transform: translateY(0px) rotate(0deg); 
        opacity: 0.7;
      }
      50% { 
        transform: translateY(-30px) rotate(180deg); 
        opacity: 1;
      }
    }
    
    @keyframes rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    @keyframes slideIn {
      from { 
        opacity: 0; 
        transform: translateY(50px); 
      }
      to { 
        opacity: 1; 
        transform: translateY(0); 
      }
    }
  `;

  const features = [
    'Theo d√µi t·ª∑ gi√° gi·ªØa h∆°n 160 lo·∫°i ti·ªÅn t·ªá theo th·ªùi gian th·ª±c.',
    'Nh·∫≠p li·ªáu t·ª∑ gi√° t·ª´ ngu·ªìn ri√™ng ho·∫∑c th·ªß c√¥ng.',
    'Xu·∫•t d·ªØ li·ªáu t·ª∑ gi√° ra CSV ƒë·ªÉ l∆∞u tr·ªØ, b√°o c√°o ho·∫∑c t√≠ch h·ª£p h·ªá th·ªëng kh√°c.',
    'Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì t·ª∑ gi√° c√πng c√°c ch·ªâ b√°o k·ªπ thu·∫≠t nh∆∞ SMA, EMA, RSI.',
    'Nh·∫≠n c·∫£nh b√°o khi t·ª∑ gi√° ƒë·∫°t ƒë·∫øn ng∆∞·ª°ng mong mu·ªën.',
    'Giao ti·∫øp real-time nh·ªù t√≠ch h·ª£p WebSocket.'
  ];

  const targetAudience = [
    'Doanh nghi·ªáp c·∫ßn c·∫≠p nh·∫≠t v√† l∆∞u tr·ªØ t·ª∑ gi√° trong h·ªá th·ªëng n·ªôi b·ªô.',
    'Nh√† ƒë·∫ßu t∆∞ c√° nh√¢n mu·ªën ph√¢n t√≠ch th·ªã tr∆∞·ªùng ngo·∫°i h·ªëi.',
    'T·ªï ch·ª©c t√†i ch√≠nh mu·ªën khai th√°c d·ªØ li·ªáu t·ª∑ gi√° l·ªãch s·ª≠.',
    'L·∫≠p tr√¨nh vi√™n x√¢y d·ª±ng h·ªá th·ªëng fintech v·ªõi d·ªØ li·ªáu t·ª∑ gi√°.'
  ];

  const steps = [
    { title: 'ƒêƒÉng k√Ω', desc: 'T·∫°o t√†i kho·∫£n ch·ªâ trong v√†i ph√∫t.' },
    { title: 'Nh·∫≠p d·ªØ li·ªáu', desc: 'T√πy ch·ªânh t·ª∑ gi√° theo ngu·ªìn ri√™ng.' },
    { title: 'Theo d√µi & ph√¢n t√≠ch', desc: 'D√πng b·∫£ng ƒëi·ªÅu khi·ªÉn v√† ch·ªâ b√°o k·ªπ thu·∫≠t.' },
    { title: 'Xu·∫•t d·ªØ li·ªáu', desc: 'T·∫£i xu·ªëng t·ª∑ gi√° ph·ª•c v·ª• ph√¢n t√≠ch v√† l∆∞u tr·ªØ.' }
  ];

  return (
    <>
      <style>{keyframes}</style>
      <div style={styles.pageContainer}>
        {/* Background shapes */}
        <div style={{...styles.backgroundShape, ...styles.shape1}}></div>
        <div style={{...styles.backgroundShape, ...styles.shape2}}></div>
        <div style={{...styles.backgroundShape, ...styles.shape3}}></div>

        {/* Header */}

        {/* Main Content */}
        <main style={styles.mainContent}>
          {/* Hero Section */}
          <section style={styles.heroSection}>
            <h1 style={styles.heroTitle}>
              <span style={styles.heroIcon}>üí±</span>
              FX Rate Dashboard
            </h1>
            <p style={styles.heroSubtitle}>
              <strong>FX Rate Dashboard</strong> l√† n·ªÅn t·∫£ng tr·ª±c quan v√† m·∫°nh m·∫Ω gi√∫p b·∫°n theo d√µi, 
              ph√¢n t√≠ch v√† xu·∫•t ‚Äì nh·∫≠p t·ª∑ gi√° ti·ªÅn t·ªá th·ªùi gian th·ª±c.
            </p>
          </section>

          {/* Features Grid */}
          <div style={styles.featuresGrid}>
            {/* Why Choose Section */}
            <div 
              style={styles.featureCard}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-10px)';
                e.currentTarget.style.boxShadow = '0 30px 60px rgba(0,0,0,0.2)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 20px 40px rgba(0,0,0,0.1)';
              }}
            >
              <h2 style={styles.featureTitle}>
                <span style={styles.featureIcon}>üöÄ</span>
                T·∫°i sao ch·ªçn FX Rate Dashboard?
              </h2>
              <ul style={styles.featureList}>
                {features.map((feature, index) => (
                  <li 
                    key={index}
                    style={{
                      ...styles.featureItem,
                      ...(hoveredItem === `feature-${index}` ? {
                        transform: 'translateX(10px)',
                        borderLeftColor: '#ff6b6b',
                        boxShadow: '0 5px 15px rgba(0,0,0,0.1)'
                      } : {})
                    }}
                    onMouseEnter={() => setHoveredItem(`feature-${index}`)}
                    onMouseLeave={() => setHoveredItem(null)}
                  >
                    {feature}
                  </li>
                ))}
              </ul>
            </div>

            {/* Target Audience Section */}
            <div 
              style={styles.featureCard}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-10px)';
                e.currentTarget.style.boxShadow = '0 30px 60px rgba(0,0,0,0.2)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 20px 40px rgba(0,0,0,0.1)';
              }}
            >
              <h2 style={styles.featureTitle}>
                <span style={styles.featureIcon}>üë•</span>
                D√†nh cho ai?
              </h2>
              <ul style={styles.featureList}>
                {targetAudience.map((audience, index) => (
                  <li 
                    key={index}
                    style={{
                      ...styles.featureItem,
                      ...(hoveredItem === `audience-${index}` ? {
                        transform: 'translateX(10px)',
                        borderLeftColor: '#ff6b6b',
                        boxShadow: '0 5px 15px rgba(0,0,0,0.1)'
                      } : {})
                    }}
                    onMouseEnter={() => setHoveredItem(`audience-${index}`)}
                    onMouseLeave={() => setHoveredItem(null)}
                  >
                    {audience}
                  </li>
                ))}
              </ul>
            </div>
          </div>

          {/* Steps Section */}
          <section style={styles.stepsSection}>
            <h2 style={styles.stepsTitle}>
              <span style={styles.featureIcon}>üß≠</span>
              4 b∆∞·ªõc ƒë·ªÉ b·∫Øt ƒë·∫ßu
            </h2>
            <div style={styles.stepsGrid}>
              {steps.map((step, index) => (
                <div 
                  key={index}
                  style={{
                    ...styles.stepCard,
                    ...(hoveredItem === `step-${index}` ? {
                      transform: 'translateY(-5px) scale(1.02)',
                      boxShadow: '0 20px 40px rgba(0,0,0,0.3)'
                    } : {})
                  }}
                  onMouseEnter={() => setHoveredItem(`step-${index}`)}
                  onMouseLeave={() => setHoveredItem(null)}
                >
                  <div style={styles.stepNumber}>{index + 1}</div>
                  <div style={styles.stepTitle}>{step.title}</div>
                  <div style={styles.stepDesc}>{step.desc}</div>
                </div>
              ))}
            </div>
          </section>

          {/* CTA Section */}
          <section style={styles.ctaSection}>
            <h2 style={styles.ctaTitle}>üéØ S·∫µn s√†ng tr·∫£i nghi·ªám?</h2>
            <p style={styles.ctaSubtitle}>
              Kh√°m ph√° s·ª©c m·∫°nh c·ªßa FX Rate Dashboard ngay h√¥m nay!
            </p>
            <a 
              href="/register" 
              style={{
                ...styles.ctaButton,
                ...(hoveredItem === 'cta-button' ? {
                  transform: 'translateY(-3px)',
                  boxShadow: '0 20px 40px rgba(0,0,0,0.3)'
                } : {})
              }}
              onMouseEnter={() => setHoveredItem('cta-button')}
              onMouseLeave={() => setHoveredItem(null)}
            >
              ƒêƒÉng k√Ω ngay
            </a>
          </section>
        </main>
      </div>
    </>
  );
};

export default Home;